#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <clocale>

class Контакт {
protected:
    std::string имя;
    std::string телефон;
    std::string адрес;

public:
    // Конструктор без параметров
    Контакт() : имя("Неизвестно"), телефон("Неизвестно"), адрес("Неизвестно") {
        std::cout << "Вызван конструктор Контакт без параметров" << std::endl;
    }

    // Конструктор с параметрами
    Контакт(const std::string& _имя, const std::string& _телефон, const std::string& _адрес)
        : имя(_имя), телефон(_телефон), адрес(_адрес) {
        std::cout << "Вызван конструктор Контакт с параметрами: " << имя << std::endl;
    }

    // Конструктор копирования
    Контакт(const Контакт& другой)
        : имя(другой.имя + "_копия"), телефон(другой.телефон), адрес(другой.адрес) {
        std::cout << "Вызван конструктор копирования Контакт для: " << имя << std::endl;
    }

    // Виртуальный деструктор
    virtual ~Контакт() {
        std::cout << "Вызван деструктор Контакт для: " << имя << std::endl;
    }

    // Геттер для имени
    std::string getИмя() const {
        return имя;
    }

    // Сеттеры
    void setИмя(const std::string& новое_имя) {
        имя = новое_имя;
    }

    void setТелефон(const std::string& новый_телефон) {
        телефон = новый_телефон;
    }

    void setАдрес(const std::string& новый_адрес) {
        адрес = новый_адрес;
    }

    // Виртуальный метод вывода
    virtual void показать() const {
        std::cout << "Имя: " << имя << ", Телефон: " << телефон << ", Адрес: " << адрес << std::endl;
    }

    // Метод ввода данных
    virtual void ввести() {
        std::cout << "Введите имя: ";
        std::getline(std::cin, имя);
        std::cout << "Введите телефон: ";
        std::getline(std::cin, телефон);
        std::cout << "Введите адрес: ";
        std::getline(std::cin, адрес);
    }
};

// Перегрузка оператора << для Контакт
std::ostream& operator<<(std::ostream& os, const Контакт& контакт) {
    контакт.показать();
    return os;
}

class РабочийКонтакт : public Контакт {
private:
    std::string должность;
    std::string компания;

public:
    // Конструктор без параметров
    РабочийКонтакт() : Контакт(), должность("Неизвестно"), компания("Неизвестно") {
        std::cout << "Вызван конструктор РабочийКонтакт без параметров" << std::endl;
    }

    // Конструктор с параметрами
    РабочийКонтакт(const std::string& _имя, const std::string& _телефон, const std::string& _адрес,
        const std::string& _должность, const std::string& _компания)
        : Контакт(_имя, _телефон, _адрес), должность(_должность), компания(_компания) {
        std::cout << "Вызван конструктор РабочийКонтакт с параметрами: " << _имя << std::endl;
    }

    // Конструктор копирования
    РабочийКонтакт(const РабочийКонтакт& другой)
        : Контакт(другой), должность(другой.должность + "_копия"), компания(другой.компания) {
        std::cout << "Вызван конструктор копирования РабочийКонтакт для: " << getИмя() << std::endl;
    }

    // Деструктор
    ~РабочийКонтакт() override {
        std::cout << "Вызван деструктор РабочийКонтакт для: " << getИмя() << std::endl;
    }

    // Сеттеры
    void setДолжность(const std::string& новая_должность) {
        должность = новая_должность;
    }

    void setКомпания(const std::string& новая_компания) {
        компания = новая_компания;
    }

    // Переопределённый метод вывода
    void показать() const override {
        Контакт::показать();
        std::cout << "Должность: " << должность << ", Компания: " << компания << std::endl;
    }

    // Метод ввода данных
    void ввести() override {
        Контакт::ввести();
        std::cout << "Введите должность: ";
        std::getline(std::cin, должность);
        std::cout << "Введите компанию: ";
        std::getline(std::cin, компания);
    }
};

// Перегрузка оператора << для РабочийКонтакт
std::ostream& operator<<(std::ostream& os, const РабочийКонтакт& контакт) {
    контакт.показать();
    return os;
}

class ЛичныйКонтакт : public Контакт {
private:
    std::string датаРождения;
    std::string email;

public:
    // Конструктор без параметров
    ЛичныйКонтакт() : Контакт(), датаРождения("Неизвестно"), email("Неизвестно") {
        std::cout << "Вызван конструктор ЛичныйКонтакт без параметров" << std::endl;
    }

    // Конструктор с параметрами
    ЛичныйКонтакт(const std::string& _имя, const std::string& _телефон, const std::string& _адрес,
        const std::string& _датаРождения, const std::string& _email)
        : Контакт(_имя, _телефон, _адрес), датаРождения(_датаРождения), email(_email) {
        std::cout << "Вызван конструктор ЛичныйКонтакт с параметрами: " << _имя << std::endl;
    }

    // Конструктор копирования
    ЛичныйКонтакт(const ЛичныйКонтакт& другой)
        : Контакт(другой), датаРождения(другой.датаРождения + "_копия"), email(другой.email) {
        std::cout << "Вызван конструктор копирования ЛичныйКонтакт для: " << getИмя() << std::endl;
    }

    // Деструктор
    ~ЛичныйКонтакт() override {
        std::cout << "Вызван деструктор ЛичныйКонтакт для: " << getИмя() << std::endl;
    }

    // Сеттеры
    void setДатаРождения(const std::string& новая_дата) {
        датаРождения = новая_дата;
    }

    void setEmail(const std::string& новый_email) {
        email = новый_email;
    }

    // Переопределённый метод вывода
    void показать() const override {
        Контакт::показать();
        std::cout << "Дата рождения: " << датаРождения << ", Email: " << email << std::endl;
    }

    // Метод ввода данных
    void ввести() override {
        Контакт::ввести();
        std::cout << "Введите дату рождения: ";
        std::getline(std::cin, датаРождения);
        std::cout << "Введите email: ";
        std::getline(std::cin, email);
    }
};

// Перегрузка оператора << для ЛичныйКонтакт
std::ostream& operator<<(std::ostream& os, const ЛичныйКонтакт& контакт) {
    контакт.показать();
    return os;
}

int main() {
    // Установка русской локали
    setlocale(LC_ALL, "Russian");

    // 1. Создание контейнера vector для хранения контактов
    std::vector<Контакт*> контакты;

    // 2. Заполнение контейнера данными
    контакты.push_back(new Контакт("Алексей", "+7-999-123-45-67", "ул. Ленина, 1"));
    контакты.push_back(new РабочийКонтакт("Иван", "+7-999-234-56-78", "ул. Мира, 10", "Менеджер", "ООО Ромашка"));
    контакты.push_back(new ЛичныйКонтакт("Мария", "+7-999-345-67-89", "пр. Победы, 5", "01.01.1990", "maria@example.com"));
    контакты.push_back(new Контакт("Петр", "+7-999-456-78-90", "ул. Советская, 15"));
    контакты.push_back(new РабочийКонтакт("Ольга", "+7-999-567-89-01", "ул. Центральная, 20", "Программист", "ООО Код"));

    // 3. Просмотр контейнера
    std::cout << "\n=== Исходный список контактов ===\n";
    for (const auto& контакт : контакты) {
        if (контакт != nullptr) {
            контакт->показать();
            std::cout << "-------------------\n";
        }
    }

    // 4. Изменение контейнера: удаление и изменение элементов
    // Удаление контакта с именем "Петр"
    контакты.erase(
        std::remove_if(контакты.begin(), контакты.end(),
            [](const Контакт* к) {
                if (к == nullptr) return false;
                return к->getИмя() == "Петр";
            }),
        контакты.end()
    );

    // Изменение данных первого контакта
    if (!контакты.empty() && контакты[0] != nullptr) {
        контакты[0]->setИмя("Александр");
        контакты[0]->setТелефон("+7-911-111-11-11");
    }

    // 5. Просмотр контейнера с использованием итераторов
    std::cout << "\n=== Модифицированный список контактов (с итераторами) ===\n";
    for (auto it = контакты.begin(); it != контакты.end(); ++it) {
        if (*it != nullptr) {
            (*it)->показать();
            std::cout << "-------------------\n";
        }
    }

    // 6. Работа с контейнером пользовательского типа (ЛичныйКонтакт)
    std::vector<ЛичныйКонтакт> личныеКонтакты;
    личныеКонтакты.emplace_back("Елена", "+7-999-890-12-34", "ул. Парковая, 35", "20.03.1995", "elena@example.com");
    личныеКонтакты.emplace_back("Дмитрий", "+7-999-901-23-45", "пр. Мира, 40", "10.07.1980", "dmitry@example.com");

    // Добавим еще один контакт через ввод с клавиатуры
    ЛичныйКонтакт новыйКонтакт;
    новыйКонтакт.ввести();
    личныеКонтакты.push_back(новыйКонтакт);

    // Просмотр личных контактов
    std::cout << "\n=== Список личных контактов ===\n";
    for (const auto& контакт : личныеКонтакты) {
        контакт.показать();
        std::cout << "-------------------\n";
    }

    // Удаление контактов, содержащих "копия" в имени (созданных через копирование)
    личныеКонтакты.erase(
        std::remove_if(личныеКонтакты.begin(), личныеКонтакты.end(),
            [](const ЛичныйКонтакт& к) { return к.getИмя().find("_копия") != std::string::npos; }),
        личныеКонтакты.end()
    );

    // Изменение первого личного контакта
    if (!личныеКонтакты.empty()) {
        личныеКонтакты[0].setEmail("new_email@example.com");
        личныеКонтакты[0].setДатаРождения("01.01.2000");
    }

    // Просмотр с использованием итераторов
    std::cout << "\n=== Модифицированный список личных контактов (с итераторами) ===\n";
    for (auto it = личныеКонтакты.begin(); it != личныеКонтакты.end(); ++it) {
        it->показать();
        std::cout << "-------------------\n";
    }

    // Очистка памяти
    for (auto& контакт : контакты) {
        if (контакт != nullptr) {
            delete контакт;
        }
    }
    контакты.clear();

    std::cout << "\n=== Конец программы ===\n";

    return 0;
}
#include <iostream>
#include <string>
#include <vector>
#include <clocale> // Для setlocale

class Контакт {
private:
    std::string имя;
    std::string телефон;
    std::string адрес;

public:
    Контакт(const std::string& _имя, const std::string& _телефон, const std::string& _адрес)
        : имя(_имя), телефон(_телефон), адрес(_адрес) {
    }

    // Геттеры
    std::string getИмя() const { return имя; }
    std::string getТелефон() const { return телефон; }
    std::string getАдрес() const { return адрес; }

    // Сеттеры
    void setИмя(const std::string& _имя) { имя = _имя; }
    void setТелефон(const std::string& _телефон) { телефон = _телефон; }
    void setАдрес(const std::string& _адрес) { адрес = _адрес; }

    // Отображение информации о контакте
    void показать() const {
        std::cout << "Имя: " << имя << ", Телефон: " << телефон << ", Адрес: " << адрес << std::endl;
    }
};

class Справочник {
private:
    std::string название;
    std::string имяВладельца;
    std::vector<Контакт> контакты;

public:
    Справочник(const std::string& _название, const std::string& _имяВладельца)
        : название(_название), имяВладельца(_имяВладельца) {
    }

    // Геттеры
    std::string getНазвание() const { return название; }
    std::string getИмяВладельца() const { return имяВладельца; }
    std::vector<Контакт>& getКонтакты() { return контакты; }

    // Сеттеры
    void setНазвание(const std::string& _название) { название = _название; }
    void setИмяВладельца(const std::string& _имяВладельца) { имяВладельца = _имяВладельца; }

    // Добавление контакта
    void добавитьКонтакт(const Контакт& контакт) {
        контакты.push_back(контакт);
        std::cout << "Контакт добавлен: " << контакт.getИмя() << std::endl;
    }

    // Удаление контакта по имени
    bool удалитьКонтакт(const std::string& имя) {
        for (auto it = контакты.begin(); it != контакты.end(); ++it) {
            if (it->getИмя() == имя) {
                контакты.erase(it);
                std::cout << "Контакт " << имя << " удалён" << std::endl;
                return true;
            }
        }
        std::cout << "Контакт " << имя << " не найден" << std::endl;
        return false;
    }

    // Отображение всех контактов
    void показатьВсе() const {
        std::cout << "Справочник: " << название << ", Владелец: " << имяВладельца << std::endl;
        std::cout << "Список контактов:" << std::endl;
        for (const auto& контакт : контакты) {
            контакт.показать();
        }
        std::cout << "Всего контактов: " << контакты.size() << std::endl;
    }

    // Перегрузка оператора () для получения количества контактов
    size_t operator()() const {
        return контакты.size();
    }
};

int main() {
    // Установка русской локали
    setlocale(LC_ALL, "Russian");

    // Создание справочника
    Справочник справочник("Личный справочник", "Иван Иванов");

    // Добавление контактов
    справочник.добавитьКонтакт(Контакт("Алексей", "+7-999-123-45-67", "ул. Ленина, 1"));
    справочник.добавитьКонтакт(Контакт("Мария", "+7-999-234-56-78", "пр. Мира, 10"));
    справочник.добавитьКонтакт(Контакт("Петр", "+7-999-345-67-89", "ул. Победы, 5"));

    // Показать все контакты
    справочник.показатьВсе();

    // Удаление контакта
    справочник.удалитьКонтакт("Мария");

    // Показать обновлённый список
    справочник.показатьВсе();

    // Вывод количества контактов через оператор ()
    std::cout << "Количество контактов: " << справочник() << std::endl;

    return 0;
}
#include <iostream>
#include <string>
#include <vector>
#include <clocale>

class Контакт {
private:
    std::string имя;
    std::string телефон;
    std::string адрес;

public:
    // Конструктор без параметров
    Контакт() : имя("Неизвестно"), телефон("Неизвестно"), адрес("Неизвестно") {
        std::cout << "Вызван конструктор Контакт без параметров" << std::endl;
    }

    // Конструктор с параметрами
    Контакт(const std::string& _имя, const std::string& _телефон, const std::string& _адрес)
        : имя(_имя), телефон(_телефон), адрес(_адрес) {
        std::cout << "Вызван конструктор Контакт с параметрами: " << имя << std::endl;
    }

    // Конструктор копирования
    Контакт(const Контакт& другой)
        : имя(другой.имя + "_копия"), телефон(другой.телефон), адрес(другой.адрес) {
        std::cout << "Вызван конструктор копирования Контакт для: " << имя << std::endl;
    }

    // Деструктор
    ~Контакт() {
        std::cout << "Вызван деструктор Контакт для: " << имя << std::endl;
    }

    // Геттеры
    std::string getИмя() const { return имя; }
    std::string getТелефон() const { return телефон; }
    std::string getАдрес() const { return адрес; }

    // Сеттеры
    void setИмя(const std::string& _имя) { имя = _имя; }
    void setТелефон(const std::string& _телефон) { телефон = _телефон; }
    void setАдрес(const std::string& _адрес) { адрес = _адрес; }

    // Отображение информации о контакте
    void показать() const {
        std::cout << "Имя: " << имя << ", Телефон: " << телефон << ", Адрес: " << адрес << std::endl;
    }
};

class Справочник {
private:
    std::string название;
    std::string имяВладельца;
    std::vector<Контакт> контакты;

public:
    // Конструктор без параметров
    Справочник() : название("Без названия"), имяВладельца("Неизвестно") {
        std::cout << "Вызван конструктор Справочник без параметров" << std::endl;
    }

    // Конструктор с параметрами
    Справочник(const std::string& _название, const std::string& _имяВладельца)
        : название(_название), имяВладельца(_имяВладельца) {
        std::cout << "Вызван конструктор Справочник с параметрами: " << название << std::endl;
    }

    // Конструктор копирования
    Справочник(const Справочник& другой)
        : название(другой.название + "_копия"), имяВладельца(другой.имяВладельца), контакты(другой.контакты) {
        std::cout << "Вызван конструктор копирования Справочник для: " << название << std::endl;
    }

    // Деструктор
    ~Справочник() {
        std::cout << "Вызван деструктор Справочник для: " << название << std::endl;
    }

    // Геттеры
    std::string getНазвание() const { return название; }
    std::string getИмяВладельца() const { return имяВладельца; }
    std::vector<Контакт>& getКонтакты() { return контакты; }

    // Сеттеры
    void setНазвание(const std::string& _название) { название = _название; }
    void setИмяВладельца(const std::string& _имяВладельца) { имяВладельца = _имяВладельца; }

    // Добавление контакта
    void добавитьКонтакт(const Контакт& контакт) {
        контакты.push_back(контакт);
        std::cout << "Контакт добавлен: " << контакт.getИмя() << std::endl;
    }

    // Новый метод: создание и добавление контакта с параметрами
    void создатьИДобавитьКонтакт(const std::string& имя, const std::string& телефон, const std::string& адрес) {
        Контакт новыйКонтакт(имя, телефон, адрес);
        добавитьКонтакт(новыйКонтакт);
    }

    // Новый метод: создание копий контакта
    void создатьКопииКонтакта(const Контакт& контакт, int количество) {
        for (int i = 0; i < количество; ++i) {
            Контакт копия(контакт);
            контакты.push_back(копия);
        }
        std::cout << "Создано " << количество << " копий контакта: " << контакт.getИмя() << std::endl;
    }

    // Удаление контакта по имени
    bool удалитьКонтакт(const std::string& имя) {
        for (auto it = контакты.begin(); it != контакты.end(); ++it) {
            if (it->getИмя() == имя) {
                контакты.erase(it);
                std::cout << "Контакт " << имя << " удалён" << std::endl;
                return true;
            }
        }
        std::cout << "Контакт " << имя << " не найден" << std::endl;
        return false;
    }

    // Отображение всех контактов
    void показатьВсе() const {
        std::cout << "Справочник: " << название << ", Владелец: " << имяВладельца << std::endl;
        std::cout << "Список контактов:" << std::endl;
        for (const auto& контакт : контакты) {
            контакт.показать();
        }
        std::cout << "Всего контактов: " << контакты.size() << std::endl;
    }

    // Перегрузка оператора () для получения количества контактов
    size_t operator()() const {
        return контакты.size();
    }
};

int main() {
    // Установка русской локали
    setlocale(LC_ALL, "Russian");

    std::cout << "\n=== Демонстрация конструкторов ===\n";

    // 1. Конструктор Справочник без параметров
    Справочник справочник1;
    справочник1.показатьВсе();

    // 2. Конструктор Справочник с параметрами
    Справочник справочник2("Рабочий справочник", "Анна Петрова");
    справочник2.показатьВсе();

    // 3. Конструктор Контакт без параметров
    Контакт контакт1;
    справочник2.добавитьКонтакт(контакт1);

    // 4. Конструктор Контакт с параметрами
    Контакт контакт2("Сергей", "+7-999-456-78-90", "ул. Советская, 15");
    справочник2.добавитьКонтакт(контакт2);

    // 5. Использование метода создатьИДобавитьКонтакт (создание через конструктор с параметрами)
    справочник2.создатьИДобавитьКонтакт("Елена", "+7-999-567-89-01", "пр. Победы, 20");

    // 6. Конструктор копирования Контакт через метод создатьКопииКонтакта
    справочник2.создатьКопииКонтакта(контакт2, 2);

    // 7. Конструктор копирования Справочник
    Справочник справочник3(справочник2);
    справочник3.показатьВсе();

    // Удаление контакта
    справочник2.удалитьКонтакт("Сергей");

    // Показать обновлённый список
    справочник2.показатьВсе();

    // Вывод количества контактов через оператор ()
    std::cout << "Количество контактов в справочнике2: " << справочник2() << std::endl;

    std::cout << "\n=== Конец программы ===\n";

    return 0;
}
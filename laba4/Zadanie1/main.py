from abc import ABC, abstractmethod
from datetime import datetime

# Абстракция: базовый класс Вклад
class Вклад(ABC):
    def __init__(self, сумма, срок_в_месяцах, процентная_ставка):
        self.__сумма = float(сумма)
        self.__срок_в_месяцах = int(срок_в_месяцах)
        self.__процентная_ставка = float(процентная_ставка)
        self.__дата_открытия = datetime.now()

    # Инкапсуляция: геттеры
    @property
    def сумма(self):
        return self.__сумма

    @property
    def срок_в_месяцах(self):
        return self.__срок_в_месяцах

    @property
    def процентная_ставка(self):
        return self.__процентная_ставка

    @abstractmethod
    def рассчитать_прибыль(self):
        pass

    # Полиморфизм: стандартные методы
    def __str__(self):
        return f"{self.__class__.__name__} (Сумма: {self.__сумма} руб., Срок: {self.__срок_в_месяцах} мес., Ставка: {self.__процентная_ставка}%)"

    def __eq__(self, other):
        if isinstance(other, Вклад):
            return (self.__сумма == other.сумма and
                    self.__срок_в_месяцах == other.срок_в_месяцах and
                    self.__процентная_ставка == other.процентная_ставка)
        return False

# Наследование: конкретные типы вкладов
class СрочныйВклад(Вклад):
    def рассчитать_прибыль(self):
        # Простые проценты: Прибыль = Сумма * Ставка * Срок / 12
        прибыль = self.сумма * (self.процентная_ставка / 100) * (self.срок_в_месяцах / 12)
        return round(прибыль, 2)

class БонусныйВклад(Вклад):
    def __init__(self, сумма, срок_в_месяцах, процентная_ставка, минимальная_сумма_для_бонуса=10000, бонус_ставка=5):
        super().__init__(сумма, срок_в_месяцах, процентная_ставка)
        self.__минимальная_сумма_для_бонуса = float(минимальная_сумма_для_бонуса)
        self.__бонус_ставка = float(бонус_ставка)

    @property
    def минимальная_сумма_для_бонуса(self):
        return self.__минимальная_сумма_для_бонуса

    def рассчитать_прибыль(self):
        прибыль = self.сумма * (self.процентная_ставка / 100) * (self.срок_в_месяцах / 12)
        if self.сумма >= self.__минимальная_сумма_для_бонуса:
            бонус = прибыль * (self.__бонус_ставка / 100)
            прибыль += бонус
        return round(прибыль, 2)

class ВкладСКапитализацией(Вклад):
    def рассчитать_прибыль(self):
        # Капитализация: сложные проценты, ежемесячная капитализация
        сумма = self.сумма
        ставка = self.процентная_ставка / 100 / 12  # Месячная ставка
        for _ in range(self.срок_в_месяцах):
            сумма += сумма * ставка
        прибыль = сумма - self.сумма
        return round(прибыль, 2)

# Композиция: класс Клиент
class Клиент:
    def __init__(self, имя):
        self.__имя = имя
        self.__вклады = []

    @property
    def имя(self):
        return self.__имя

    def добавить_вклад(self, вклад):
        self.__вклады.append(вклад)

    @property
    def вклады(self):
        return self.__вклады

    def __str__(self):
        вклады_список = "\n".join(str(вклад) for вклад in self.__вклады)
        return f"Клиент {self.__имя}:\n{вклады_список}"

# Класс Банк
class Банк:
    def __init__(self):
        self.__клиенты = []

    def добавить_клиента(self, клиент):
        self.__клиенты.append(клиент)

    # Вызываемый метод для расчёта прибыли
    def __call__(self, клиент_имя, вклад_тип, сумма, срок, ставка, **kwargs):
        клиент = next((c for c in self.__клиенты if c.имя == клиент_имя), None)
        if not клиент:
            клиент = Клиент(клиент_имя)
            self.добавить_клиента(клиент)
        
        if вклад_тип == "Срочный":
            вклад = СрочныйВклад(сумма, срок, ставка)
        elif вклад_тип == "Бонусный":
            вклад = БонусныйВклад(сумма, срок, ставка, **kwargs)
        elif вклад_тип == "Капитализация":
            вклад = ВкладСКапитализацией(сумма, срок, ставка)
        else:
            raise ValueError("Неверный тип вклада")
        
        клиент.добавить_вклад(вклад)
        прибыль = вклад.рассчитать_прибыль()
        return f"Для клиента {клиент_имя} добавлен {вклад_тип} вклад. Прибыль: {прибыль} руб."

# Пример использования
if __name__ == "__main__":
    банк = Банк()
    
    # Добавление вкладов для клиента
    print(банк("Иван", "Срочный", 10000, 12, 5))  # Простые проценты
    print(банк("Иван", "Бонусный", 15000, 12, 6, минимальная_сумма_для_бонуса=10000, бонус_ставка=5))  # С бонусом
    print(банк("Иван", "Капитализация", 10000, 12, 5))  # С капитализацией
    
    # Вывод информации о клиенте
    клиент = next(c for c in банк._Банк__клиенты if c.имя == "Иван")
    print(клиент)
    
    # Проверка полиморфизма
    вклад1 = СрочныйВклад(10000, 12, 5)
    вклад2 = СрочныйВклад(10000, 12, 5)
    print(f"Вклады равны: {вклад1 == вклад2}")  # True